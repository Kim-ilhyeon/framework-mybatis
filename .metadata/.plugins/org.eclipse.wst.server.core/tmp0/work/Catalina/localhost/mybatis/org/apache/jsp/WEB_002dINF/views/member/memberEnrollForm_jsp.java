/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-03-27 06:36:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberEnrollForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Mybatis project</title>\r\n");
      out.write("\r\n");
      out.write("<!-- 부트스트랩 CDN -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<!-------------------->\r\n");
      out.write("<!-- jQuery CDN -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" \r\n");
      out.write("		integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" \r\n");
      out.write("		crossorigin=\"anonymous\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("	#mem-enroll-area {\r\n");
      out.write("		margin: auto;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<tr%-- menubar.jsp 포함 --%>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/menubar.jsp", out, false);
      out.write("\r\n");
      out.write("	회원가입 페이지##\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"outer\">\r\n");
      out.write("		<br>\r\n");
      out.write("\r\n");
      out.write("		<h2 align=\"center\">회원가입</h2>\r\n");
      out.write("\r\n");
      out.write("		<form action=\"insert.me\" method=\"post\" id=\"mem-enroll-area\">\r\n");
      out.write("			<table align=\"center\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>* 아이디</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" class=\"form-control\" name=\"userId\" maxlength=\"30\" required >\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"button\" class=\"btn btn-sm btn-outline-dark\" value=\"중복체크\" onclick=\"idCheck();\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>* 비밀번호</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" class=\"form-control\" name=\"userPwd\" required>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>* 비밀번호 확인</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" class=\"form-control\" id=\"userPwdCheck\" required>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>* 이름</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" class=\"form-control\" name=\"userName\" >\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>&nbsp;&nbsp;이메일</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"email\" class=\"form-control\" name=\"email\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>&nbsp;&nbsp;성별</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<div class=\"form-check form-check-inline\">\r\n");
      out.write("							<input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"M\" id=\"genderM\">\r\n");
      out.write("							<label class=\"form-check-label\" for=\"genderM\">\r\n");
      out.write("							  남자\r\n");
      out.write("							</label>\r\n");
      out.write("						  </div>\r\n");
      out.write("\r\n");
      out.write("						  <div class=\"form-check form-check-inline\">\r\n");
      out.write("							<input class=\"form-check-input\" type=\"radio\" name=\"gender\" value=\"F\" id=\"genderF\" checked>\r\n");
      out.write("							<label class=\"form-check-label\" for=\"genderF\">\r\n");
      out.write("							  여자\r\n");
      out.write("							</label>\r\n");
      out.write("						  </div>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>&nbsp;&nbsp;생년월일</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"date\" class=\"form-control\" onchange=\"makeBirth(this);\"/>\r\n");
      out.write("						<input type=\"hidden\" name=\"birthday\"/>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>&nbsp;&nbsp;연락처</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"tel\" class=\"form-control\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\" placeholder=\"- 포함하여 작성하시오.\"/>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>&nbsp;&nbsp;주소</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" class=\"form-control\" name=\"address\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("			<br><br>\r\n");
      out.write("\r\n");
      out.write("			<div align=\"center\">\r\n");
      out.write("				<button class=\"btn btn-primary\" type=\"submit\" onclick=\"return checkPwd();\">회원가입</button>\r\n");
      out.write("				<button class=\"btn btn-danger\" type=\"reset\">초기화</button>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("		</form>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function makeBirth(target) {\r\n");
      out.write("			// 입력된 값 가져오기\r\n");
      out.write("			const data = target.value;\r\n");
      out.write("			// document.getElementById(\"아이디 값\")\r\n");
      out.write("			// document.querySelector(\"선택자\")\r\n");
      out.write("			\r\n");
      out.write("			// document.getElementsClassName(\"클래스명\")\r\n");
      out.write("			// document.querySelectorAll(\"선택자\")\r\n");
      out.write("			\r\n");
      out.write("			console.log(data);\r\n");
      out.write("			\r\n");
      out.write("			// yyyy-mm-dd 형식에서 yymmdd 형식으로 변경\r\n");
      out.write("			// (1) Date 객체 사용\r\n");
      out.write("			const birth = new Date(data);\r\n");
      out.write("			\r\n");
      out.write("			console.log(birth);\r\n");
      out.write("			\r\n");
      out.write("			let yy = birth.getFullYear() % 100;\r\n");
      out.write("			let mm = (\"0\" + (birth.getMonth() + 1)).slice(-2);\r\n");
      out.write("			let dd = (\"0\" + birth.getDate()).slice(-2);\r\n");
      out.write("			\r\n");
      out.write("			console.log(yy, mm, dd);\r\n");
      out.write("			\r\n");
      out.write("			// (2) String 객체 메소드 사용 => split 메소드\r\n");
      out.write("			const dArr = data.split('-'); // ['yyyy', 'mm', 'dd']\r\n");
      out.write("			yy = dArr[0].slice(-2);\r\n");
      out.write("			mm = dArr[1];\r\n");
      out.write("			dd = dArr[2];\r\n");
      out.write("			\r\n");
      out.write("			console.log(yy, mm, dd);\r\n");
      out.write("			\r\n");
      out.write("			console.log(yy+mm+dd);\r\n");
      out.write("			\r\n");
      out.write("			// yy, mm, dd 를 하나로 합쳐서 name 속성이 birthday인 요소에 값을 저장\r\n");
      out.write("			document.querySelector(\"#mem-enroll-area input[name=birthday]\").value = yy+mm+dd;\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		/*\r\n");
      out.write("		const makeBirrth = (target) => {\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		*/\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 입력된 '비밀번호' 값과 '비밀번호 확인' 값이 같을 경우 true\r\n");
      out.write("		// 다를 경우 false 를 리턴\r\n");
      out.write("		function checkPwd() {\r\n");
      out.write("			// 비밀번호 입력 값 --> name = userPwd\r\n");
      out.write("			const userP = document.querySelector(\"#mem-enroll-area input[name=userPwd]\").value;\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 확인 입력값 --> id = userPwdCheck\r\n");
      out.write("			const userPC = document.getElementById(\"userPwdCheck\").value;\r\n");
      out.write("			\r\n");
      out.write("			// console.log(userP, userPC);\r\n");
      out.write("			\r\n");
      out.write("			// 두 값이 다를 경우 false 리턴\r\n");
      out.write("			if (userP != userPC) {\r\n");
      out.write("				alert(\"비밀번호와 비밀번호 확인 입력값이 다릅니다.\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("//		function makePhone(target) {\r\n");
      out.write("//			const data = target.value;\r\n");
      out.write("//			\r\n");
      out.write("//			console.log(data);\r\n");
      out.write("//			\r\n");
      out.write("//			if (!data.includes('-')) {\r\n");
      out.write("//				data.replace()\r\n");
      out.write("//			}\r\n");
      out.write("//		}\r\n");
      out.write("\r\n");
      out.write("	// 아이디 중복체크 (비동기 통신, ajax)\r\n");
      out.write("		function idCheck() {\r\n");
      out.write("			// [중복체크] 클릭 시 사용자가 입력한 아이디값을 전달하여 조회\r\n");
      out.write("			// => 존재하는지 하지않는지 여부를 확인 후 응답 데이터를 받을 것임!\r\n");
      out.write("			\r\n");
      out.write("			// * 입력된 아이디 값 조회(추출) (jQuery)\r\n");
      out.write("			const $userId = $(\"#mem-enroll-area input[name=userId]\");\r\n");
      out.write("//			console.log( $userId, $userId.val() );\r\n");
      out.write("			\r\n");
      out.write("			console.log(\"*** ajax 요청 전 ***\");\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			// $.ajax(요청 정보);\r\n");
      out.write("			// * 요청정보 : 객체(json)형태로  key-value형태로 작성\r\n");
      out.write("			/*\r\n");
      out.write("				- url : 요청주소\r\n");
      out.write("				- type / method : 요청 방식 (get, post, . . . )\r\n");
      out.write("				- data : 전달할 데이터(json)형태로 {키:밸류, 키:밸류, . . .}\r\n");
      out.write("				\r\n");
      out.write("				- success : 요청(통신) 성공 시 처리할 내용(함수)\r\n");
      out.write("				- errir   : 요청(통신) 실패 시 처리할 내용(함수)\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				---- 참고 ----\r\n");
      out.write("				- async : 서버와의 비동기통신 처리여부 (기본값 : true)\r\n");
      out.write("				- contentType : 요청 시 데이터 인코딩 방식\r\n");
      out.write("				- dataType : 서버에서 응답 시 전달되는 데이터 형식 설정\r\n");
      out.write("							(설정하지 않을 경우 자동으로 판단)\r\n");
      out.write("					+ xml  : 트리형태\r\n");
      out.write("					+ json : 객체(Map 형식) -- .일반적인 데이터 구조\r\n");
      out.write("					+ html : html 형식(태크)\r\n");
      out.write("					+ text : 문자열 데이터\r\n");
      out.write("			*/\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: 'idCheck',\r\n");
      out.write("				data: {\r\n");
      out.write("					userId: $userId.val()\r\n");
      out.write("				},\r\n");
      out.write("				type: 'get', // 생략 가능!!\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				success:function() {\r\n");
      out.write("					// 요청(통신) 성공 시\r\n");
      out.write("				}, \r\n");
      out.write("				error: function() {\r\n");
      out.write("					// 요청(통신) 실패 시\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("	\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
